# –í–∞–∂–Ω–æ! –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∏–∫–æ–º.
"""
a = range(0, 10, 2)
print(f'{a=}, {type(a)=}, {a.__sizeof__()=}, {len(a)}')
b = range(-1_000_000, 1_000_000, 2)
print(f'{b=}, {type(b)=}, {b.__sizeof__()=}, {len(b)}')
"""

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 'a' –Ω–∞ –ø—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 'b' –Ω–∞ 1 –º–ª–Ω. –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–Ω–∏–º–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤ –ø–∞–º—è—Ç–∏.

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è Python –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –ø–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–π –∑–Ω–∞—á–µ–Ω–∏—è.
"""
my_gen = (chr(i) for i in range(97, 123))
print(my_gen)  # <generator object <genexpr> at 0x>
for char in my_gen:
    print(char)
"""

# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.

# –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ for –∏ if –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞—Ö –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
"""
x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
mult = (i + j for i in x if i % 2 != 0 for j in y if j != 1)
res = list(mult)
print(f'{len(res)=}\n{res}')
"""

# List comprehensions
"""
my_listcomp = [chr(i) for i in range(97, 123)]
print(my_listcomp)  # ['a', 'b', 'c', 'd', ..., z]
for char in my_listcomp:
    print(char)
"""

# –î–ª–∏–Ω–Ω—ã–π –∫–æ–¥:
"""
data = [2, 5, 1, 42, 65, 76, 24, 77]
res = []
for item in data:
    if item % 2 == 0:
        res.append(item)
print(f'{res = }')  # res = [2, 42, 76, 24]
"""

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ listcomp:
"""
data = [2, 5, 1, 42, 65, 76, 24, 77]
res = [item for item in data if item % 2 == 0]
print(f'{res = }')  # res = [2, 42, 76, 24]
"""

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
"""
x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
res = [i + j for i in x if i % 2 != 0 for j in y if j != 1]
print(f'{len(res)=}\n{res}')
"""
# –ï—Å–ª–∏ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –º—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ü–∏–∫–ª–µ.
# –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–æ–¥–æ–π–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫.
"""
x = [1, 1, 2, 3, 5, 8, 13]
y = [1, 2, 6, 24, 120, 720]
print(f'{len(x)=}\t{len(y)=}')
mult = (i + j for i in x if i % 2 != 0 for j in y if j != 1)
for item in mult:
    print(f'{item = }')
"""
# üî• –í–∞–∂–Ω–æ! –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –∑–∞—Ä–∞–Ω–µ–µ —Ä–µ—à–∏—Ç–µ –Ω—É–∂–Ω–∞ –≤–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –Ω–µ—Ç.
# –ù–µ —Å—Ç–æ–∏—Ç —Ç—Ä–∞—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –≤—ã –∏–º–∏ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

# Set comprehensions
"""
my_setcomp = {chr(i) for i in range(97, 123)}
print(my_setcomp)  # {'f', 'g', 'b', 'j', 'e',... }
for char in my_setcomp:
    print(char)
"""

# Set comprehensions
# set_comp = {expression for expr in sequence1 if condition1 ‚Ä¶}

# Dict comprehensions
# dict_comp = {key: value for expr in sequence1 if condition1 ‚Ä¶}

# –°—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–ª–∏—á–∏—è
# {–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è}
# —Å–ª–æ–≤–∞—Ä—å –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ


# Dict comprehensions
# –ï—â—ë –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è.
"""
my_dictcomp = {i: chr(i) for i in range(97, 123)}
print(my_dictcomp)  # {97: 'a', 98: 'b', 99: 'c',... }
for number, char in my_dictcomp.items():
    print(f'dict[{number}] = {char}')
"""

# üî• –í–∞–∂–Ω–æ! –°—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Ç–∏–ø–∞.

#  –§—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
""" –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def factorial(n):
    number = 1
    result = []
    for i in range(1, n + 1):
        number *= i
        result.append(number)
    return result


for i, num in enumerate(factorial(10), start=1):
    print(f'{i}! = {num}')
"""

# –ö–æ–º–∞–Ω–¥–∞ yield –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
# –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ yield –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏.
# –°–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä–æ–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
"""
def factorial(n):
    number = 1
    for i in range(1, n + 1):
        number *= i
        yield number

for i, num in enumerate(factorial(10), start=1):
    print(f'{i}! = {num}')

# –§—É–Ω–∫—Ü–∏–∏ iter –∏ next –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
# iter –∏ next –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:

my_iter = iter(factorial(4))
print(my_iter)
print(next(my_iter))  # 1
print(next(my_iter))  # 2
print(next(my_iter))  # 6
print(next(my_iter))  # 24
# print(next(my_iter))  # StopIteration (ERROR)
"""
