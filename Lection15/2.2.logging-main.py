import logging

"""
logging.basicConfig(level=logging.NOTSET)
logging.debug('Очень подробная отладочная информация. Заменяем множество "принтов"')
logging.info('Немного информации о работе кода')
logging.warning('Внимание! Надвигается буря!')
logging.error('Поймали ошибку. Дальше только неизвестность')
logging.critical('На этом всё')

# DEBUG:root:Очень подробная отладочная информация. Заменяем множество "принтов"
# INFO:root:Немного информации о работе кода
# WARNING:root:Внимание! Надвигается буря!
# ERROR:root:Поймали ошибку. Дальше только неизвестность
# CRITICAL:root:На этом всё
"""

# Разработчик сам выбирает какой уровень использовать для регистрации того или иного события в его коде.
# Обычно в коде не используют прямое обращение к регистраторам через имя модуля.
# В официальной документации указано, что работать с регистраторами напрямую запрещено.
# Необходимо использовать функцию уровня модуля
# logging.getLogger(name) для получения регистраторов.
# В таком случае пример выше должен выглядеть так:

logging.basicConfig(level=logging.NOTSET)
logger = logging.getLogger(__name__)
logger.debug('Очень подробная отладочная информация. Заменяем множество "принтов"')
logger.info('Немного информации о работе кода')
logger.warning('Внимание! Надвигается буря!')
logger.error('Поймали ошибку. Дальше только неизвестность')
logger.critical('На этом всё')

# Напомним, что переменная __name__ хранит имя модуля.
# Если мы запускаем модуль как исполняемый файл, в __name__ хранится __main__.
# Если файл импортирован, __name__ хранит имя файла.

# DEBUG:__main__:Очень подробная отладочная информация. Заменяем множество "принтов"
# INFO:__main__:Немного информации о работе кода
# WARNING:__main__:Внимание! Надвигается буря!
# ERROR:__main__:Поймали ошибку. Дальше только неизвестность
# CRITICAL:__main__:На этом всё

