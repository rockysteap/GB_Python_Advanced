"""
abs(), aiter(), all(), any(), anext(), ascii(), bin(), bool(), breakpoint(),
bytearray(), bytes(), callable(), chr(), classmethod(), compile(), complex(),
delattr(), dict(), dir(), divmod(), enumerate(), eval(), exec(), filter(), float(),
format(), frozenset(), getattr(), globals(), hasattr(), hash(), help(), hex(), id(),
input(), int(), isinstance(), issubclass(), iter(), len(), list(), locals(), map(),
max(), memoryview(), min(), next(), object(), oct(), open(), ord(), pow(), print(),
property(), range(), repr(), reversed(), round(), set(), setattr(), slice(), sorted(),
staticmethod(), str(), sum(), super(), tuple(), type(), vars(), zip().
"""

# –§—É–Ω–∫—Ü–∏–∏ map(), filter(), zip()

# ‚óè –§—É–Ω–∫—Ü–∏—è map()
# map(function, iterable) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç map –∏—Ç–µ—Ä–∞—Ç–æ—Ä.
"""
texts = ["–ü—Ä–∏–≤–µ—Ç", "–ó–î–û–†–û–í–ê", "–ø—Ä–∏–≤–µ–¢—Å—Ç–≤—É—é"]
res = map(lambda x: x.lower(), texts)
print(*res)  # –ø—Ä–∏–≤–µ—Ç –∑–¥–æ—Ä–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é
"""

# ‚óè –§—É–Ω–∫—Ü–∏—è filter()
# filter(function, iterable) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
# –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, —ç–ª–µ–º–µ–Ω—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
# –ö–∞–∫ –∏ map –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä.
"""
numbers = [42, -73, 1024]
res = tuple(filter(lambda x: x > 0, numbers))
print(res)  # (42, 1024)
"""
# –õ—è–º–±–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω—É–ª—è.
# –§—É–Ω–∫—Ü–∏—è tuple –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫ –∫–æ—Ä—Ç–µ–∂—É —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.


# ‚óè –§—É–Ω–∫—Ü–∏—è zip()
# zip(*iterables, strict=False) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ –∏—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç strict=True,
# –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É ValueError –≤ —Å–ª—É—á–∞–µ —Ä–∞–∑–Ω–æ–≥–æ —á–∏—Å–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.
"""
names = ["–ò–≤–∞–Ω", "–ù–∏–∫–æ–ª–∞–π", "–ü—ë—Ç—Ä"]
salaries = [125_000, 96_000, 109_000]
awards = [0.1, 0.25, 0.13, 0.99]
for name, salary, award in zip(names, salaries, awards):
    print(f'{name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary:.2f} –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é {salary * award:.2f}')
# –ò–≤–∞–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª 125000.00 –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é 12500.00
# –ù–∏–∫–æ–ª–∞–π –∑–∞—Ä–∞–±–æ—Ç–∞–ª 96000.00 –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é 24000.00
# –ü—ë—Ç—Ä –∑–∞—Ä–∞–±–æ—Ç–∞–ª 109000.00 –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é 14170.00
"""
# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞, –∑–∞—Ä–ø–ª–∞—Ç—É –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–º–∏–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –ò—Ç–µ—Ä–∞—Ü–∏—è –∏–¥—ë—Ç —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ


# –§—É–Ω–∫—Ü–∏–∏ max(), min(), sum()

# ‚óè –§—É–Ω–∫—Ü–∏—è max()

# max(iterable, *[, key, default]) –∏–ª–∏ max(arg1, arg2, *args[, key])
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
# –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∏—â–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –Ω–∏—Ö.
# –ö–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä key —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–∞–≤–Ω–∏—Ç—å,
# –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.
# –û—Ç–¥–µ–ª—å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä default –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä.
"""
lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä", 109_000)]
print(max(lst_1, default='empty'))  # empty
print(max(*lst_2))  # 256
print(max(lst_2))  # 256
print(max(lst_3, key=lambda x: x[1]))  # ('–ò–≤–∞–Ω', 125000)
# –í –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç—Ä–æ–∫—É empty.
# –í–æ –≤—Ç–æ—Ä–æ–º ‚Äî —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—à–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
# –í —Ç—Ä–µ—Ç—å–µ–º –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–∏ —Ç—Ä—ë—Ö –∫–æ—Ä—Ç–µ–∂–µ–π –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –∏–Ω–¥–µ–∫—Å–æ–º –æ–¥–∏–Ω, —Ç.–µ. –ø–æ —á–∏—Å–ª—É.
"""

# ‚óè –§—É–Ω–∫—Ü–∏—è min()

# min(iterable, *[, key, default]) –∏–ª–∏ min(arg1, arg2, *args[, key])
# –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ max, –Ω–æ –∏—â–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
"""
lst_1 = []  # empty
lst_2 = [42, 256, 73]  # 42
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä", 109_000)]  # ('–ù–∏–∫–æ–ª–∞–π', 96000)
print(min(lst_1, default='empty'))
print(min(*lst_2))
print(min(lst_3, key=lambda x: x[1]))
"""

# ‚óè –§—É–Ω–∫—Ü–∏—è sum()

# sum(iterable, /, start=0)
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç start –∑–∞–¥–∞—ë—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
"""
my_list = [42, 256, 73]
print(sum(my_list))  # 371
print(sum(my_list, start=1024))  # 1395
"""

# –§—É–Ω–∫—Ü–∏–∏ all(), any()

# ‚óè –§—É–Ω–∫—Ü–∏—è all()

# all(iterable)
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π.
# –ù–∞ Python —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ all –≤—ã–≥–ª—è–¥–µ–ª–æ –±—ã —Ç–∞–∫:
"""
def all_(iterable):
    for element in iterable:
        if not element:
            return False
    return True
"""
# –§—É–Ω–∫—Ü–∏—è all –æ–±—ã—á–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–∞–∫–∏—Ö-—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π,
# –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∏–ª–∏ –ª–æ–∂–Ω—ã–º–∏.
"""
numbers = [42, -73, 1024]
if all(map(lambda x: x > 0, numbers)):
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
else:
    print('–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')
# –í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
"""
# –§—É–Ω–∫—Ü–∏—è map –∑–∞–º–µ–Ω–∏–ª–∞ —á–∏—Å–ª–∞ –Ω–∞ True –∏ False,
# –¥–∞–ª–µ–µ all –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ –≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω—É–ª—è –∏–ª–∏ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –Ω–µ –±–æ–ª–µ–µ –Ω—É–ª—è.


# ‚óè –§—É–Ω–∫—Ü–∏—è any()

# any(iterable)

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —è–≤–ª—è—é—Ç—Å—è –∏—Å—Ç–∏–Ω–æ–π.
# –ù–∞ Python —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ any –≤—ã–≥–ª—è–¥–µ–ª–æ –±—ã —Ç–∞–∫:
"""
def any_(iterable):
    for element in iterable:
        if element:
            return True
    return False
"""
# –§—É–Ω–∫—Ü–∏—è any —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ all.
# –ù–æ –µ—Å–ª–∏ all –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ if c —Ü–µ–ø–æ—á–∫–æ–π and, —Ç–æ any ‚Äî —ç—Ç–æ if —Å —Ü–µ–ø–æ—á–∫–æ–π or.
"""
numbers = [42, -73, 1024]
if any(map(lambda x: x > 0, numbers)):
    print('–•–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π')
else:
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –±–æ–ª—å—à–µ –Ω—É–ª—è')
# –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
"""
# –§—É–Ω–∫—Ü–∏—è map –∑–∞–º–µ–Ω–∏–ª–∞ —á–∏—Å–ª–∞ –Ω–∞ True –∏ False,
# –¥–∞–ª–µ–µ all –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ –≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω—É–ª—è –∏–ª–∏ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –Ω–µ –±–æ–ª–µ–µ –Ω—É–ª—è.

# üî• –í–∞–∂–Ω–æ! –í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ª–∏–Ω–µ–π–Ω—É—é –∞—Å–∏–º–ø—Ç–æ—Ç–∏–∫—É O(n),
# —Ç.–µ. —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.


# –§—É–Ω–∫—Ü–∏–∏ chr(), ord()
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–∞—Ä—É —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –∏—Ö –∫–æ–¥–∞–º–∏ –≤ –Æ–Ω–∏–∫–æ–¥.

# ‚óè –§—É–Ω–∫—Ü–∏—è chr()

# chr(integer)
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Æ–Ω–∏–∫–æ–¥ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É.
# –ù–æ–º–µ—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1_114_111.
"""
print(chr(97))  # a
print(chr(1105))  # —ë
print(chr(128519))  # üòá
"""

# ‚óè –§—É–Ω–∫—Ü–∏—è ord()

# ord(char)
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ –Æ–Ω–∏–∫–æ–¥.
"""
print(ord('a'))  # 97
print(ord('–∞'))  # 1072
print(ord('üòâ'))  # 128521
"""

# –§—É–Ω–∫—Ü–∏–∏ ord –∏ chr –≤—ã–ø–æ–ª–Ω—è—é—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.


# –§—É–Ω–∫—Ü–∏–∏ locals(), globals(), vars()
# –ò –≤ —Ñ–∏–Ω–∞–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ–±–ª–∞—Å—Ç—è—Ö –≤–∏–¥–∏–º–æ—Å—Ç–∏.

# ‚óè –§—É–Ω–∫—Ü–∏—è locals()
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
SIZE = 10
def func(a, b, c):
    x = a + b
    print(locals())
    z = x + c
    return z
func(1, 2, 3)  # {'a': 1, 'b': 2, 'c': 3, 'x': 3}
"""
# –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ a, b, c, x –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ SIZE –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ –≤—ã–≤–æ–¥, —Ç.–∫. –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏.
# –¢–∞–∫ –∂–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è z. –û–Ω–∞ –±—ã–ª–∞ –≤–ø–µ—Ä–≤—ã–µ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ locals.

# üî• –í–∞–∂–Ω–æ! Python –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è locals.
# –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–¥–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é.


# ‚óè –§—É–Ω–∫—Ü–∏—è globals()
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏, —Ç.–µ. –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –º–æ–¥—É–ª—è.
"""
SIZE = 10
def func(a, b, c):
    x = a + b
    print(globals())
    z = x + c
    return z

print(globals())        # { ''', 'func': <function func at 0x000002098AED4A40> } 
print(func(1, 2, 3))    # { ''', 'func': <function func at 0x000002098AED4A40> }
"""

# –§—É–Ω–∫—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏.

# –í —Å–ª–æ–≤–∞—Ä–µ –æ—Ç globals —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –∏ –¥–∞–Ω–¥–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª—è.
# –û–Ω–∏ –Ω—É–∂–Ω—ã Python –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞.

# üî• –í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é locals() –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –º–æ–¥—É–ª—è,
# –∞ –Ω–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Ä–∞–±–æ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ globals()
"""
x = 42
glob_dict = globals()
glob_dict['x'] = 73
print(x)
"""

# –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç locals —Å–ª–æ–≤–∞—Ä—å globals –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.


# ‚óè –§—É–Ω–∫—Ü–∏—è vars()
# –§—É–Ω–∫—Ü–∏—è –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ locals().
# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ vars –æ–±—ä–µ–∫—Ç, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç __dict__.
# –ê –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ—Ç —É –æ–±—ä–µ–∫—Ç–∞, –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É TypeError.
"""
print(vars(int))
"""
