# ● Локальные переменные:
def func(y: int) -> int:
    x = 100
    print(f'In func {x = }')  # Для демонстрации работы, но не для привычки принтить из функции
    return y + 1


x = 42
print(f'In main {x = }')
z = func(x)
print(f'{x = }\t{z = }')

#
print()


#


# ● Глобальные переменные:
def func(y: int) -> int:
    global x
    x += 100
    print(f'In func {x = }')  # Для демонстрации работы, но не для привычки принтить из функции
    return y + 1


x = 42
print(f'In main {x = }')
z = func(x)
print(f'{x = }\t{z = }')

#
print()


#

# ● Не локальные переменные:
def main(a):
    x = 1

    def func(y):
        nonlocal x
        x += 100
        print(f'In func {x = }')  # Для демонстрации работы, но не для привычки принтить из функции
        return y + 1

    return x + func(a)


x = 42
print(f'In main {x = }')
z = main(x)
print(f'{x = }\t{z = }')

#
print()
#


# Доступ к константам
# Один из случаев когда обращение из тела функции к глобальной переменной
# считается нормальным — доступ к константам.
LIMIT = 1_000


def func(x, y):
    result = x ** y % LIMIT
    return result


print(func(42, 73))

# Константа LIMIT является глобальной. При обращении к ней из функции
# производится поиск в локальной области, т.е. в теле функции. Далее поиск
# переходит на уровень выше, в глобальную область видимости модуля. Чтение
# значений констант внутри функции будет работать без ошибок.
