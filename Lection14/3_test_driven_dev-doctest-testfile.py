# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª. test-driven development, TDD) ‚Äî
#   —Ç–µ—Ö–Ω–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è,
#   –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ü–∏–∫–ª–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
#       —Å–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ—Ç—Å—è —Ç–µ—Å—Ç, –ø–æ–∫—Ä—ã–≤–∞—é—â–∏–π –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ,
#       –∑–∞—Ç–µ–º –ø–∏—à–µ—Ç—Å—è –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç,
#       –∏ –ø–æ–¥ –∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
#
# –í TDD –≤—ã–¥–µ–ª—è—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã:
#   1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
#   2. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç
#   3. –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥
#   4. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤: —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
#   5. –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
#   6. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ü–∏–∫–ª

def is_prime(p: int) -> bool:
    """
    Checks the number P for simplicity using finding the
    remainder of the division in the range [2, P).
    >>> is_prime(42)
    False
    >>> is_prime(73)
    True
    >>> is_prime(3.14)
    Traceback (most recent call last):
    ...
    TypeError: The number P must be an integer type
    >>> is_prime(-100)
    Traceback (most recent call last):
    ...
    ValueError: The number P must be greater than 1
    >>> is_prime(1)
    Traceback (most recent call last):
    ...
    ValueError: The number P must be greater than 1
    >>> is_prime(100_000_001)
    If the number P is prime, the check may take a long time.
    Working...
    False
    >>> is_prime(100_000_007)
    If the number P is prime, the check may take a long time.
    Working...
    True
    """
    if not isinstance(p, int):
        raise TypeError('The number P must be an integer type')
    elif p < 2:
        raise ValueError('The number P must be greater than 1')
    elif p > 100_000_000:
        print(f'If the number P is prime, the check may take a long time.\n'
              f'Working...')
    for i in range(2, p):
        if p % i == 0:
            return False
    return True


if __name__ == '__main__':
    import doctest

    # doctest.testmod(verbose=True)
    doctest.testfile('prime.md', verbose=True)

# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö –æ—à–∏–±–æ–∫.
# –ú–æ–¥—É–ª—å doctest –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –æ–± –æ—à–∏–±–∫–µ.
# –≠—Ç–æ –∏–ª–∏ Traceback (most recent call last): –∏–ª–∏ Traceback (innermost last):
# –¢–∞–∫ –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞, –ø—É—Ç–∏ –∏–º–µ–Ω–∞ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è, —Å–µ—Ä–µ–¥–∏–Ω–∞ –≤—ã–≤–æ–¥–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
# –ï—ë –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ.
# –í–∞–∂–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ –Ω–µ–π —Ç–µ–∫—Å—Ç–∞.


# üî• –í–∞–∂–Ω–æ!
# –¢–∞–∫ –∫–∞–∫ doctest —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –≤—ã–∑–æ–≤ –æ—à–∏–±–∫–∏,
# –Ω–∞–ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ raise –∏ –ø–µ—á–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ print()
# –±—É–¥—É—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ.
