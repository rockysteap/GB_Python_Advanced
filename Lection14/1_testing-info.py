# Тестирование кода является неотъемлемой частью больших проектов.
# Мало кто пишет тесты для одноразовых задач в несколько строчек кода.

# Но если ваш проект планирует развиваться,
# тесты помогут экономить время при расширении функционала,
# внесении доработок в существующий код.

# Обычно тестирование подразделяется на три категории:

#   1. Функциональное тестирование
#       ○ Модульное (компонентное)
#       ○ Интеграционное
#       ○ Системное
#       ○ Регрессионное
#       ○ Приемочное
#       ○ Смоук

#   2. Тестирование производительности
#       ○ Тестирование отказоустойчивости
#       ○ Нагрузочное
#       ○ Объемное
#       ○ Тестирование масштабируемости

#   3. Обслуживание (регресс и обслуживание)
#       ○ Регрессионное
#       ○ Тестирование технического обслуживания

# Список далеко не полный. Да и способов группировки тестирования больше много больше.
# В рамках данного курса и лекции не будут рассматриваться все возможные виды тестирования.
# Главная цель занятия - познакомить с тремя основными инструментами,
# позволяющими писать тесты для ваших Python проектов.
#
# При этом в рамках проекта обычно используется один из трёх рассматриваемых вариантов, а не все разом.
# По традиции разберём возможные варианты на примерах кода с пояснениями.
